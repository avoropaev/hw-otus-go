// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/avoropaev/hw-otus-go/hw12_13_14_15_calendar/internal/app (interfaces: Storage)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	storage "github.com/avoropaev/hw-otus-go/hw12_13_14_15_calendar/internal/storage"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
	time "time"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method
func (m *MockStorage) CreateEvent(arg0 context.Context, arg1 storage.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent
func (mr *MockStorageMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStorage)(nil).CreateEvent), arg0, arg1)
}

// DeleteEvent mocks base method
func (m *MockStorage) DeleteEvent(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent
func (mr *MockStorageMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockStorage)(nil).DeleteEvent), arg0, arg1)
}

// FindEventByGUID mocks base method
func (m *MockStorage) FindEventByGUID(arg0 context.Context, arg1 uuid.UUID) (*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventByGUID", arg0, arg1)
	ret0, _ := ret[0].(*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventByGUID indicates an expected call of FindEventByGUID
func (mr *MockStorageMockRecorder) FindEventByGUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventByGUID", reflect.TypeOf((*MockStorage)(nil).FindEventByGUID), arg0, arg1)
}

// FindEventsByInterval mocks base method
func (m *MockStorage) FindEventsByInterval(arg0 context.Context, arg1, arg2 time.Time) ([]*storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEventsByInterval", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEventsByInterval indicates an expected call of FindEventsByInterval
func (mr *MockStorageMockRecorder) FindEventsByInterval(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEventsByInterval", reflect.TypeOf((*MockStorage)(nil).FindEventsByInterval), arg0, arg1, arg2)
}

// UpdateEvent mocks base method
func (m *MockStorage) UpdateEvent(arg0 context.Context, arg1 uuid.UUID, arg2 storage.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent
func (mr *MockStorageMockRecorder) UpdateEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockStorage)(nil).UpdateEvent), arg0, arg1, arg2)
}
